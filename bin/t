#!/usr/bin/env bash

if [ "$1" = "-h" ] || [ "$1" == "--help" ]; then # help argument
	printf "\n"
	printf "\033[1m  t - the smart tmux session manager\033[0m\n"
	printf "\033[37m  https://github.com/joshmedeski/t-smart-tmux-session-manager\n"
	printf "\n"
	printf "\033[32m  Run interactive mode\n"
	printf "\033[34m      t\n"
	printf "\033[34m        ctrl-s list only tmux sessions\n"
	printf "\033[34m        ctrl-x list only zoxide results\n"
	printf "\033[34m        ctrl-d list directories\n"
	printf "\n"
	printf "\033[32m  Go to session (matches tmux session, zoxide result, or directory)\n"
	printf "\033[34m      t {name}\n"
	printf "\n"
	printf "\033[32m  Open popup (while in tmux)\n"
	printf "\033[34m      <prefix>+T\n"
	printf "\033[34m        ctrl-s list only tmux sessions\n"
	printf "\033[34m        ctrl-x list only zoxide results\n"
	printf "\033[34m        ctrl-d list directories\n"
	printf "\n"
	printf "\033[32m  Show help\n"
	printf "\033[34m      t -h\n"
	printf "\033[34m      t --help\n"
	printf "\n"
	exit 0
fi

tmux ls &>/dev/null
TMUX_STATUS=$?

HOME_REPLACER=""                                          # default to a noop
echo "$HOME" | grep -E "^[a-zA-Z0-9\-_/.@]+$" &>/dev/null # chars safe to use in sed
HOME_SED_SAFE=$?
if [ $HOME_SED_SAFE -eq 0 ]; then # $HOME should be safe to use in sed
	HOME_REPLACER="s|^$HOME/|~/|"
fi

BORDER_LABEL=" t - smart tmux session manager "
HEADER=" ctrl-s: sessions / ctrl-x: zoxide / ctrl-d: directory"
SESSION_BIND="ctrl-s:change-prompt(sessions> )+reload(tmux list-sessions -F '#S')"
ZOXIDE_BIND="ctrl-x:change-prompt(zoxide> )+reload(zoxide query -l | sed -e \"$HOME_REPLACER\")"

if fd --version &>/dev/null; then # fd is installed
	DIR_BIND="ctrl-d:change-prompt(directory> )+reload(cd $HOME && echo $HOME; fd --type d --hidden --absolute-path --color never --exclude .git --exclude node_modules)"
else # fd is not installed
	DIR_BIND="ctrl-d:change-prompt(directory> )+reload(cd $HOME && find ~+ -type d -name node_modules -prune -o -name .git -prune -o -type d -print)"
fi

FILTER_REGEX="^__"

get_sessions_by_mru() {
	tmux list-sessions -F '#{session_last_attached} #{session_name}' \
        | sort --numeric-sort --reverse  \
        | awk '{print $2}' \
        | grep -v $FILTER_REGEX
}

if [ $# -eq 0 ]; then             # no argument provided
	if [ "$TMUX" = "" ]; then        # not in tmux
		if [ $TMUX_STATUS -eq 0 ]; then # tmux is running
			RESULT=$(
				(get_sessions_by_mru && (zoxide query -l | sed -e "$HOME_REPLACER")) | fzf \
                    --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
                    --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
                    --color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
                    --border sharp \
                    --layout reverse \
                    --prompt '∷ ' \
                    --pointer '▶' \
					--bind "$DIR_BIND" \
					--bind "$SESSION_BIND" \
					--bind "$ZOXIDE_BIND" \
					--border-label "$BORDER_LABEL" \
					--header "$HEADER" \
					--no-sort \
			)
		else # tmux is not running
			RESULT=$(
				(zoxide query -l | sed -e "$HOME_REPLACER") | fzf \
                    --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
                    --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
                    --color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
                    --border sharp \
                    --layout reverse \
                    --prompt '∷ ' \
                    --pointer '▶' \
					--bind "$DIR_BIND" \
					--border-label "$BORDER_LABEL" \
					--header " ctrl-d: directory" \
					--no-sort \
			)
		fi
	else # in tmux
		RESULT=$(
			(get_sessions_by_mru && (zoxide query -l | sed -e "$HOME_REPLACER")) | fzf-tmux \
                --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
                --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
                --color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
                --border sharp \
                --layout reverse \
                --prompt '∷ ' \
                --pointer '▶' \
				--bind "$DIR_BIND" \
				--bind "$SESSION_BIND" \
				--bind "$ZOXIDE_BIND" \
				--border-label "$BORDER_LABEL" \
				--header "$HEADER" \
				--no-sort \
				-p 60%,50%
		)
	fi
else # argument provided
	zoxide query "$1" &>/dev/null
	ZOXIDE_RESULT_EXIT_CODE=$?
	if [ $ZOXIDE_RESULT_EXIT_CODE -eq 0 ]; then # zoxide result found
		RESULT=$(zoxide query "$1")
	else # no zoxide result found
		ls "$1" &>/dev/null
		LS_EXIT_CODE=$?
		if [ $LS_EXIT_CODE -eq 0 ]; then # directory found
			RESULT=$1
		else # no directory found
			echo "No directory found."
			exit 1
		fi
	fi
fi

if [ "$RESULT" = "" ]; then # no result
	exit 0                     # exit silently
fi

if [ $HOME_SED_SAFE -eq 0 ]; then
	RESULT=$(echo "$RESULT" | sed -e "s|^~/|$HOME/|") # get real home path back
fi

zoxide add "$RESULT" &>/dev/null # add to zoxide database
FOLDER=$(basename "$RESULT")
SESSION_NAME=$(echo "$FOLDER" | tr ' .:' '_')

if [ $TMUX_STATUS -eq 0 ]; then                                 # tmux is running
	SESSION=$(tmux list-sessions -F '#S' | grep "^$SESSION_NAME$") # find existing session
else
	SESSION=""
fi

if [ "$TMUX" = "" ]; then                          # not currently in tmux
	if [ "$SESSION" = "" ]; then                      # session does not exist
        if [ -f "$RESULT/.tmuxp.yaml" ]; then         # tmuxp session file exists
            tmuxp load -y "$RESULT/.tmuxp.yaml"          # load tmuxp session
        elif [ -f "$RESULT/.tmuxp.yml" ]; then
            tmuxp load -y "$RESULT/.tmuxp.yml"
        elif [ -f "$RESULT/.tmuxp.json" ]; then
            tmuxp load -y "$RESULT/.tmuxp.json"
        else
            tmux new-session -s "$SESSION_NAME" -c "$RESULT" # create session and attach
        fi
	else                                              # session exists
		tmux attach -t "$SESSION"                        # attach to session
	fi
else                                                  # currently in tmux
	if [ "$SESSION" = "" ]; then                         # session does not exist
        if [ -f "$RESULT/.tmuxp.yaml" ]; then         # tmuxp session file exists
            tmuxp load -y "$RESULT/.tmuxp.yaml"          # load tmuxp session
        elif [ -f "$RESULT/.tmuxp.yml" ]; then
            tmuxp load -y "$RESULT/.tmuxp.yml"
        elif [ -f "$RESULT/.tmuxp.json" ]; then
            tmuxp load -y "$RESULT/.tmuxp.json"
        else
            tmux new-session -d -s "$SESSION_NAME" -c "$RESULT" # create session
            tmux switch-client -t "$SESSION_NAME"               # attach to session
        fi
	else                                                 # session exists
		tmux switch-client -t "$SESSION"                    # switch to session
	fi
fi
